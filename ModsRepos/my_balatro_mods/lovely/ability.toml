[manifest]
version = "1.0.0"
dump_lua = true
priority = 0


# Create Ability Area 
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = '''G.SPLASH_BACK = Sprite(-30, -6, G.ROOM.T.w+60, G.ROOM.T.h+12, G.ASSET_ATLAS["ui_1"], {x = 2, y = 0})'''
position = "before"
payload = '''
if USING_BETMMA_ABILITIES then -- not adding area if Betmma_Abilities.lua isn't executed
    self.ABILITY_W=0.8
    self.ABILITY_H=0.8
    self.betmma_abilities = CardArea(G.jokers.T.x + G.jokers.T.w + 0.2+1.1*G.CARD_W, G.jokers.T.y+2.2*G.CARD_H, 1.2*G.CARD_W, 0.3*G.CARD_H, { -- G.jokers.T.x + G.jokers.T.w + 0.2 is G.consumables.x but some deck removes consumables area
            card_limit = 3,
            type = "betmma_ability",
            highlight_limit = 1
    })
    self.betmma_abilities.card_w=self.betmma_abilities.card_w*34/71
end
'''
match_indent = true


# Create Abilities in shop
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = '''if G.load_shop_booster then'''
position = "before"
payload = '''
if G.shop_abilities then
    if G.load_shop_abilities then 
        nosave_shop = true
        G.shop_abilities:load(G.load_shop_abilities)
        for k, v in ipairs(G.shop_abilities.cards) do
            create_shop_card_ui(v)
            v:start_materialize()
        end
        G.load_shop_abilities = nil
    else
        for i = 1, G.GAME.shop.ability_max - #G.shop_abilities.cards do
            local center=pseudorandom_element(G.P_CENTER_POOLS['Ability'],pseudoseed('shop_abilities'))
            local card = create_card('Ability', nil, nil, nil, nil, nil, nil, 'sho')
            --local card = Card(G.shop_abilities.T.x + G.shop_abilities.T.w/2,
            --G.shop_abilities.T.y+G.ABILITY_W*(i-1), G.ABILITY_W, G.ABILITY_H, G.P_CARDS.empty, center,{bypass_discovery_center = true, bypass_discovery_ui = true})
            if cry_misprintize then
                cry_misprintize(card)
            end
                if G.GAME.modifiers.cry_enable_flipped_in_shop and pseudorandom('cry_flip_'..G.GAME.round_resets.ante) > 0.7 then
                    card.cry_flipped = true
                end
            create_shop_card_ui(card, 'Ability', nil)
            --card:start_materialize()
            G.shop_abilities:emplace(card)
        end
    end
end
'''
match_indent = true



# Let Abilities go to Ability Area when bought from shop
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "G.consumeables:emplace(c1)"
position = "at"
payload = '''
    if c1.ability.set=='Ability' and G.betmma_abilities then -- betmma_abilities
        G.betmma_abilities:emplace(c1)
    else
        G.consumeables:emplace(c1)
    end
'''
match_indent = true

# Prevent using Abilities costs pack card 
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "elseif G.GAME.pack_choices and G.GAME.pack_choices > 1 then"
position = "before"
payload = '''
elseif card.ability.set=='Ability' then -- betmma_abilities
    G.booster_pack.alignment.offset.y = G.booster_pack.alignment.offset.py
    G.booster_pack.alignment.offset.py = nil
'''
match_indent = true


# Prevent dissolve when using Abilities in pack. Also emplace Ability card when bought from pack
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "if G.STATE == G.STATES.TAROT_PACK or G.STATE == G.STATES.PLANET_PACK or G.STATE == G.STATES.SPECTRAL_PACK*"
position = "after"
payload = '''
if card.ability.set=='Ability' then -- betmma_abilities
    area:remove_from_highlighted(card)
    play_sound('cardSlide2', nil, 0.3)
    dont_dissolve = true
    if card.area~=G.betmma_abilities and G.betmma_abilities then
        area:remove_card(card)
        G.betmma_abilities:emplace(card)
    end
end
'''
match_indent = true

# modify draw_shader function to support sending values in _send while also sending original values like mouse_screen_pos.
[[patches]]
[patches.pattern]
target = "engine/sprite.lua"
pattern = '''G.SHADERS[_shader or 'dissolve']:send("shadow",(not not _shadow_height))'''
position = "after"
payload = '''
if type(_send)=='table' and _send.betmma==true then
    --G.SHADERS[_shader or 'dissolve']:send((SMODS.Shaders[_shader or 'dissolve'] and SMODS.Shaders[_shader or 'dissolve'].original_key) or _shader,_send.vanilla)
    for k, v in ipairs(_send.extra) do
        G.SHADERS[_shader]:send(v.name, v.val or (v.func and v.func()) or v.ref_table[v.ref_value])
    end
    _send=nil
end
'''
match_indent = true

# call calculate_joker on each ability when a consumable is used.
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''e.config.ref_table:use_consumeable(area)'''
position = "after"
payload = '''
if G.betmma_abilities then
    for i = 1, #G.betmma_abilities.cards do
        G.betmma_abilities.cards[i]:calculate_joker({using_consumeable = true, consumeable = card})
    end
end
'''
match_indent = true

# call calculate_joker on each ability when hand played. (after everything but before deck effect (plasma) and before cards break)
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''local nu_chip, nu_mult = G.GAME.selected_back:trigger_effect{context = 'final_scoring_step', chips = hand_chips, mult = mult}'''
position = "before"
payload = '''
if G.betmma_abilities then
    for i=1,#G.betmma_abilities.cards do
        local _card=G.betmma_abilities.cards[i]
        local effects = eval_card(_card, {
            cardarea = G.jokers,
            full_hand = G.play.cards,
            scoring_hand = scoring_hand,
            scoring_name = text,
            poker_hands = poker_hands,
            joker_main = true
        })
    
        -- Any Joker effects
        if effects.jokers then
            local extras = {
                mult = false,
                hand_chips = false
            }
            if effects.jokers.mult_mod then
                mult = mod_mult(mult + effects.jokers.mult_mod);
                extras.mult = true
            end
            if effects.jokers.chip_mod then
                hand_chips = mod_chips(hand_chips + effects.jokers.chip_mod);
                extras.hand_chips = true
            end
            if effects.jokers.Xmult_mod then
                mult = mod_mult(mult * effects.jokers.Xmult_mod);
                extras.mult = true
            end
            if effects.jokers.pow_mult_mod then
                mult = mod_mult(mult ^ effects.jokers.pow_mult_mod);
                extras.mult = true
            end
            if effects.jokers.Xchip_mod then
                hand_chips = mod_chips(hand_chips * effects.jokers.Xchip_mod);
                extras.hand_chips = true
            end
            update_hand_text({
                delay = 0
            }, {
                chips = extras.hand_chips and hand_chips,
                mult = extras.mult and mult
            })
            card_eval_status_text(_card, 'jokers', nil, percent, nil, effects.jokers)
            if effects.jokers.joker_repetitions then
                rep_list = effects.jokers.joker_repetitions
                for z = 1, #rep_list do
                    if type(rep_list[z]) == 'table' and rep_list[z].repetitions then
                        for r = 1, rep_list[z].repetitions do
                            card_eval_status_text(rep_list[z].card, 'jokers', nil, nil, nil, rep_list[z])
                            if percent then
                                percent = percent + percent_delta
                            end
    
                            local ef = eval_card(_card, {
                                cardarea = G.betmma_abilities,
                                full_hand = G.play.cards,
                                scoring_hand = scoring_hand,
                                scoring_name = text,
                                poker_hands = poker_hands,
                                joker_main = true,
                                retrigger_joker = true
                            })
    
                            -- Any Joker effects
                            if ef.jokers then
                                local extras = {
                                    mult = false,
                                    hand_chips = false
                                }
                                if ef.jokers.mult_mod then
                                    mult = mod_mult(mult + ef.jokers.mult_mod);
                                    extras.mult = true
                                end
                                if ef.jokers.chip_mod then
                                    hand_chips = mod_chips(hand_chips + ef.jokers.chip_mod);
                                    extras.hand_chips = true
                                end
                                if ef.jokers.Xmult_mod then
                                    mult = mod_mult(mult * ef.jokers.Xmult_mod);
                                    extras.mult = true
                                end
                                if ef.jokers.pow_mult_mod then
                                    mult = mod_mult(mult ^ ef.jokers.pow_mult_mod);
                                    extras.mult = true
                                end
                                if ef.jokers.Xchip_mod then
                                    hand_chips = mod_chips(hand_chips * ef.jokers.Xchip_mod);
                                    extras.hand_chips = true
                                end
                                update_hand_text({
                                    delay = 0
                                }, {
                                    chips = extras.hand_chips and hand_chips,
                                    mult = extras.mult and mult
                                })
                                card_eval_status_text(_card, 'jokers', nil, percent, nil, effects.jokers)
                                -- Exponentia
                                if ef.jokers.Xmult_mod and ef.jokers.Xmult_mod ~= 1 and next(find_joker("cry-Exponentia")) then
                                    for _, v in pairs(find_joker("cry-Exponentia")) do
                                        v.ability.extra.pow_mult = v.ability.extra.pow_mult + v.ability.extra.pow_mult_mod
                                        card_eval_status_text(v, 'extra', nil, nil, nil, {
                                            message = "^" .. v.ability.extra.pow_mult .. " Mult"
                                        })
                                    end
                                end
                                if percent then
                                    percent = percent + percent_delta
                                end
                            end
                        end
                    end
                end
            end
            if effects.jokers.Xmult_mod and effects.jokers.Xmult_mod ~= 1 and next(find_joker("cry-Exponentia")) then
                for _, v in pairs(find_joker("cry-Exponentia")) do
                    v.ability.extra.pow_mult = v.ability.extra.pow_mult + v.ability.extra.pow_mult_mod
                    card_eval_status_text(v, 'extra', nil, nil, nil, {
                        message = "^" .. v.ability.extra.pow_mult .. " Mult"
                    })
                end
            end
            percent = percent+percent_delta
        end
    end
    
end
'''
match_indent = true

# call calculate_joker on each ability when round ends. (disabled as it's redundant)
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''if game_over then nope'''
position = "before"
payload = '''
if G.betmma_abilities then
    for i = 1, #G.betmma_abilities.cards do
        local eval = nil
        eval = G.betmma_abilities.cards[i]:calculate_joker({end_of_round = true, game_over = game_over})
        if eval and eval.joker_repetitions then
            rep_list = eval.joker_repetitions
            for z=1, #rep_list do
                if type(rep_list[z]) == 'table' and rep_list[z].repetitions then
                    for r=1, rep_list[z].repetitions do
                        card_eval_status_text(rep_list[z].card, 'jokers', nil, nil, nil, rep_list[z])
                        if percent then percent = percent+percent_delta end
                        local ev = G.betmma_abilities.cards[i]:calculate_joker({end_of_round = true, game_over = game_over, retrigger_joker = true})
                        if ev then
                            if ev.saved then
                                game_over = false
                            end
                            card_eval_status_text(G.betmma_abilities.cards[i], 'jokers', nil, nil, nil, ev)
                        end
                    end
                end
            end
        end
        if eval then
            if eval.saved then
                game_over = false
            end
            card_eval_status_text(G.betmma_abilities.cards[i], 'jokers', nil, nil, nil, eval)
        end
        G.betmma_abilities.cards[i]:calculate_rental()
        G.betmma_abilities.cards[i]:calculate_perishable()
    end
end
'''
match_indent = true

# shuffle cards if having shuffle ability
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = '''if #G.hand.cards < 1 and #G.deck.cards < 1 and #G.play.cards < 1 then'''
position = "at"
payload = '''
if #G.hand.cards < 1 and #G.deck.cards < 1 and #G.play.cards < 1 and #G.discard.cards > 0 and has_ability and has_ability('shuffle')then
    G.FUNCS.draw_from_discard_to_deck()
elseif #G.hand.cards < 1 and #G.deck.cards < 1 and #G.play.cards < 1 then
'''
match_indent = true

# shuffle cards if having shuffle ability
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = '''if #G.hand.cards < 1 and #G.deck.cards < 1 then'''
position = "at"
payload = '''
if #G.hand.cards < 1 and #G.deck.cards < 1 and #G.discard.cards > 0 and has_ability and has_ability('shuffle')then
    G.FUNCS.draw_from_discard_to_deck()
elseif #G.hand.cards < 1 and #G.deck.cards < 1 then
'''
match_indent = true


# try to add seals to jokers but they can't work at all (disabled)
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''if (v.type == 'Base' or v.type == 'Enhanced') and G.GAME.used_vouchers["v_illusion"] and pseudorandom(pseudoseed('illusion')) > 0.8 then nope'''
position = "before"
payload = '''
if (v.type == 'Joker') then
    local seal=SMODS.poll_seal({mod=30})
    card:set_seal(seal)
end
'''
match_indent = true


# (disabled)
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''if next(eval) then nope'''
position = "after"
payload = '''
if eval.jokers==nil and eval.seals and eval.seals.repetitions then
    eval.jokers={
                    message = localize('k_again_ex'),
                    repetitions = eval.seals.repetitions,
                    card = eval.seals.card
                }
elseif eval.seals==nil and eval.jokers and eval.jokers.repetitions then
    eval.seals={
                    message = localize('k_again_ex'),
                    repetitions = eval.jokers.repetitions,
                    card = eval.jokers.card
                }
else
    eval.jokers={repetitions=0}
    eval.seals={repetitions=0}
end
'''
match_indent = true
